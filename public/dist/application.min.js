"use strict";var ApplicationConfiguration=function(){var applicationModuleName="trollozans",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.select2"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("poems"),ApplicationConfiguration.registerModule("tags"),ApplicationConfiguration.registerModule("topics"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("poems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Poems","poems","dropdown","/poems(/create)?"),Menus.addSubMenuItem("topbar","poems","List Poems","poems"),Menus.addSubMenuItem("topbar","poems","New Poem","poems/create")}]),angular.module("poems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPoems",{url:"/poems",templateUrl:"modules/poems/views/list-poems.client.view.html"}).state("createPoem",{url:"/poems/create",templateUrl:"modules/poems/views/create-poem.client.view.html"}).state("viewPoem",{url:"/poems/:poemId",templateUrl:"modules/poems/views/view-poem.client.view.html"}).state("editPoem",{url:"/poems/:poemId/edit",templateUrl:"modules/poems/views/edit-poem.client.view.html"})}]),angular.module("poems").controller("PoemsController",["$scope","$stateParams","$location","Authentication","Poems","Topics","Tags",function($scope,$stateParams,$location,Authentication,Poems,Topics,Tags){$scope.authentication=Authentication,$scope.create=function(){var poem=new Poems({content:this.content,topic:this.topic,title:this.title,tags:[this.tag]});poem.$save(function(response){$location.path("poems/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.content="",this.topic="",this.title="",this.tag=""},$scope.remove=function(poem){if(poem){poem.$remove();for(var i in $scope.poems)$scope.poems[i]===poem&&$scope.poems.splice(i,1)}else $scope.poem.$remove(function(){$location.path("poems")})},$scope.update=function(){var poem=$scope.poem;poem.$update(function(){$location.path("poems/"+poem._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.poems=Poems.query()},$scope.findOne=function(){$scope.poem=Poems.get({poemId:$stateParams.poemId})},$scope.findTopics=function(){$scope.topics=Topics.query()},$scope.findTags=function(){$scope.tags=Tags.query()}}]),angular.module("poems").factory("Poems",["$resource",function($resource){return $resource("poems/:poemId",{poemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("tags").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Tags","tags","dropdown","/tags(/create)?"),Menus.addSubMenuItem("topbar","tags","List Tags","tags"),Menus.addSubMenuItem("topbar","tags","New Tag","tags/create")}]),angular.module("tags").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTags",{url:"/tags",templateUrl:"modules/tags/views/list-tags.client.view.html"}).state("createTag",{url:"/tags/create",templateUrl:"modules/tags/views/create-tag.client.view.html"}).state("viewTag",{url:"/tags/:tagId",templateUrl:"modules/tags/views/view-tag.client.view.html"}).state("editTag",{url:"/tags/:tagId/edit",templateUrl:"modules/tags/views/edit-tag.client.view.html"})}]),angular.module("tags").controller("TagsController",["$scope","$stateParams","$location","Authentication","Tags",function($scope,$stateParams,$location,Authentication,Tags){$scope.authentication=Authentication,$scope.create=function(){var tag=new Tags({title:this.title,description:this.description});tag.$save(function(response){$location.path("tags/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.title="",this.description=""},$scope.remove=function(tag){if(tag){tag.$remove();for(var i in $scope.tags)$scope.tags[i]===tag&&$scope.tags.splice(i,1)}else $scope.tag.$remove(function(){$location.path("tags")})},$scope.update=function(){var tag=$scope.tag;tag.$update(function(){$location.path("tags/"+tag._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.tags=Tags.query()},$scope.findOne=function(){$scope.tag=Tags.get({tagId:$stateParams.tagId})}}]),angular.module("tags").factory("Tags",["$resource",function($resource){return $resource("tags/:tagId",{tagId:"@_id"},{update:{method:"PUT"}})}]),angular.module("topics").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Topics","topics","dropdown","/topics(/create)?"),Menus.addSubMenuItem("topbar","topics","List Topics","topics"),Menus.addSubMenuItem("topbar","topics","New Topic","topics/create")}]),angular.module("topics").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTopics",{url:"/topics",templateUrl:"modules/topics/views/list-topics.client.view.html"}).state("createTopic",{url:"/topics/create",templateUrl:"modules/topics/views/create-topic.client.view.html"}).state("viewTopic",{url:"/topics/:topicId",templateUrl:"modules/topics/views/view-topic.client.view.html"}).state("editTopic",{url:"/topics/:topicId/edit",templateUrl:"modules/topics/views/edit-topic.client.view.html"})}]),angular.module("topics").controller("TopicsController",["$scope","$stateParams","$location","Authentication","Topics","Tags",function($scope,$stateParams,$location,Authentication,Topics,Tags){$scope.authentication=Authentication,$scope.create=function(){var topic=new Topics({title:this.title,content:this.content,tags:[this.tag],description:this.description});topic.$save(function(response){$location.path("topics/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.title="",this.content={},this.tag="",this.description=""},$scope.remove=function(topic){if(topic){topic.$remove();for(var i in $scope.topics)$scope.topics[i]===topic&&$scope.topics.splice(i,1)}else $scope.topic.$remove(function(){$location.path("topics")})},$scope.update=function(){var topic=$scope.topic;topic.$update(function(){$location.path("topics/"+topic._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.topics=Topics.query()},$scope.findOne=function(){$scope.topic=Topics.get({topicId:$stateParams.topicId})},$scope.findTags=function(){$scope.tags=Tags.query()}}]),angular.module("topics").directive("bindUnsafeHtml",["$compile",function($compile){return function(scope,element,attrs){scope.$watch(function(scope){return scope.$eval(attrs.bindUnsafeHtml)},function(value){element.html(value),$compile(element.contents())(scope)})}}]),angular.module("topics").factory("Topics",["$resource",function($resource){return $resource("topics/:topicId",{topicId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/signin.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);